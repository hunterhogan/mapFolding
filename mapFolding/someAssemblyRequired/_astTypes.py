"""This file is generated automatically, so changes to this file will be lost."""
from mapFolding import astDOTParamSpec, astDOTTryStar, astDOTTypeAlias, astDOTTypeVar, astDOTTypeVarTuple, astDOTtype_param
from typing import TypeAlias as typing_TypeAlias
import ast
hasDOTannotation_expr: typing_TypeAlias = ast.AnnAssign
hasDOTannotation_exprOrNone: typing_TypeAlias = ast.arg
hasDOTannotation: typing_TypeAlias = hasDOTannotation_expr | hasDOTannotation_exprOrNone
hasDOTarg_Identifier: typing_TypeAlias = ast.arg
hasDOTarg_IdentifierOrNone: typing_TypeAlias = ast.keyword
hasDOTarg: typing_TypeAlias = hasDOTarg_Identifier | hasDOTarg_IdentifierOrNone
hasDOTargs_list_arg: typing_TypeAlias = ast.arguments
hasDOTargs_arguments: typing_TypeAlias = ast.AsyncFunctionDef | ast.FunctionDef | ast.Lambda
hasDOTargs_list_expr: typing_TypeAlias = ast.Call
hasDOTargs: typing_TypeAlias = hasDOTargs_list_arg | hasDOTargs_arguments | hasDOTargs_list_expr
hasDOTargtypes: typing_TypeAlias = ast.FunctionType
hasDOTasname: typing_TypeAlias = ast.alias
hasDOTattr: typing_TypeAlias = ast.Attribute
hasDOTbases: typing_TypeAlias = ast.ClassDef
hasDOTbody_list_stmt: typing_TypeAlias = ast.AsyncFor | ast.AsyncFunctionDef | ast.AsyncWith | ast.ClassDef | ast.ExceptHandler | ast.For | ast.FunctionDef | ast.If | ast.Interactive | ast.match_case | ast.Module | ast.Try | astDOTTryStar | ast.While | ast.With
hasDOTbody_expr: typing_TypeAlias = ast.Expression | ast.IfExp | ast.Lambda
hasDOTbody: typing_TypeAlias = hasDOTbody_list_stmt | hasDOTbody_expr
hasDOTbound: typing_TypeAlias = astDOTTypeVar
hasDOTcases: typing_TypeAlias = ast.Match
hasDOTcause: typing_TypeAlias = ast.Raise
hasDOTcls: typing_TypeAlias = ast.MatchClass
hasDOTcomparators: typing_TypeAlias = ast.Compare
hasDOTcontext_expr: typing_TypeAlias = ast.withitem
hasDOTconversion: typing_TypeAlias = ast.FormattedValue
hasDOTctx: typing_TypeAlias = ast.Attribute | ast.List | ast.Name | ast.Starred | ast.Subscript | ast.Tuple
hasDOTdecorator_list: typing_TypeAlias = ast.AsyncFunctionDef | ast.ClassDef | ast.FunctionDef
hasDOTdefault_value: typing_TypeAlias = astDOTParamSpec | astDOTTypeVar | astDOTTypeVarTuple
hasDOTdefaults: typing_TypeAlias = ast.arguments
hasDOTelt: typing_TypeAlias = ast.GeneratorExp | ast.ListComp | ast.SetComp
hasDOTelts: typing_TypeAlias = ast.List | ast.Set | ast.Tuple
hasDOTexc: typing_TypeAlias = ast.Raise
hasDOTfinalbody: typing_TypeAlias = ast.Try | astDOTTryStar
hasDOTformat_spec: typing_TypeAlias = ast.FormattedValue
hasDOTfunc: typing_TypeAlias = ast.Call
hasDOTgenerators: typing_TypeAlias = ast.DictComp | ast.GeneratorExp | ast.ListComp | ast.SetComp
hasDOTguard: typing_TypeAlias = ast.match_case
hasDOThandlers: typing_TypeAlias = ast.Try | astDOTTryStar
hasDOTid: typing_TypeAlias = ast.Name
hasDOTifs: typing_TypeAlias = ast.comprehension
hasDOTis_async: typing_TypeAlias = ast.comprehension
hasDOTitems: typing_TypeAlias = ast.AsyncWith | ast.With
hasDOTiter: typing_TypeAlias = ast.AsyncFor | ast.comprehension | ast.For
hasDOTkey: typing_TypeAlias = ast.DictComp
hasDOTkeys_list_exprOrNone: typing_TypeAlias = ast.Dict
hasDOTkeys_list_expr: typing_TypeAlias = ast.MatchMapping
hasDOTkeys: typing_TypeAlias = hasDOTkeys_list_exprOrNone | hasDOTkeys_list_expr
hasDOTkeywords: typing_TypeAlias = ast.Call | ast.ClassDef
hasDOTkind: typing_TypeAlias = ast.Constant
hasDOTkw_defaults: typing_TypeAlias = ast.arguments
hasDOTkwarg: typing_TypeAlias = ast.arguments
hasDOTkwd_attrs: typing_TypeAlias = ast.MatchClass
hasDOTkwd_patterns: typing_TypeAlias = ast.MatchClass
hasDOTkwonlyargs: typing_TypeAlias = ast.arguments
hasDOTleft: typing_TypeAlias = ast.BinOp | ast.Compare
hasDOTlevel: typing_TypeAlias = ast.ImportFrom
hasDOTlineno: typing_TypeAlias = ast.TypeIgnore
hasDOTlower: typing_TypeAlias = ast.Slice
hasDOTmodule: typing_TypeAlias = ast.ImportFrom
hasDOTmsg: typing_TypeAlias = ast.Assert
hasDOTname_Identifier: typing_TypeAlias = ast.alias | ast.AsyncFunctionDef | ast.ClassDef | ast.FunctionDef | astDOTParamSpec | astDOTTypeVar | astDOTTypeVarTuple
hasDOTname_IdentifierOrNone: typing_TypeAlias = ast.ExceptHandler | ast.MatchAs | ast.MatchStar
hasDOTname_Name: typing_TypeAlias = astDOTTypeAlias
hasDOTname: typing_TypeAlias = hasDOTname_Identifier | hasDOTname_IdentifierOrNone | hasDOTname_Name
hasDOTnames_list_Identifier: typing_TypeAlias = ast.Global | ast.Nonlocal
hasDOTnames_list_alias: typing_TypeAlias = ast.Import | ast.ImportFrom
hasDOTnames: typing_TypeAlias = hasDOTnames_list_Identifier | hasDOTnames_list_alias
hasDOTop_operator: typing_TypeAlias = ast.AugAssign | ast.BinOp
hasDOTop_boolop: typing_TypeAlias = ast.BoolOp
hasDOTop_unaryop: typing_TypeAlias = ast.UnaryOp
hasDOTop: typing_TypeAlias = hasDOTop_operator | hasDOTop_boolop | hasDOTop_unaryop
hasDOToperand: typing_TypeAlias = ast.UnaryOp
hasDOTops: typing_TypeAlias = ast.Compare
hasDOToptional_vars: typing_TypeAlias = ast.withitem
hasDOTorelse_list_stmt: typing_TypeAlias = ast.AsyncFor | ast.For | ast.If | ast.Try | astDOTTryStar | ast.While
hasDOTorelse_expr: typing_TypeAlias = ast.IfExp
hasDOTorelse: typing_TypeAlias = hasDOTorelse_list_stmt | hasDOTorelse_expr
hasDOTpattern_pattern: typing_TypeAlias = ast.match_case
hasDOTpattern_patternOrNone: typing_TypeAlias = ast.MatchAs
hasDOTpattern: typing_TypeAlias = hasDOTpattern_pattern | hasDOTpattern_patternOrNone
hasDOTpatterns: typing_TypeAlias = ast.MatchClass | ast.MatchMapping | ast.MatchOr | ast.MatchSequence
hasDOTposonlyargs: typing_TypeAlias = ast.arguments
hasDOTrest: typing_TypeAlias = ast.MatchMapping
hasDOTreturns_exprOrNone: typing_TypeAlias = ast.AsyncFunctionDef | ast.FunctionDef
hasDOTreturns_expr: typing_TypeAlias = ast.FunctionType
hasDOTreturns: typing_TypeAlias = hasDOTreturns_exprOrNone | hasDOTreturns_expr
hasDOTright: typing_TypeAlias = ast.BinOp
hasDOTsimple: typing_TypeAlias = ast.AnnAssign
hasDOTslice: typing_TypeAlias = ast.Subscript
hasDOTstep: typing_TypeAlias = ast.Slice
hasDOTsubject: typing_TypeAlias = ast.Match
hasDOTtag: typing_TypeAlias = ast.TypeIgnore
hasDOTtarget_NameOrAttributeOrSubscript: typing_TypeAlias = ast.AnnAssign | ast.AugAssign
hasDOTtarget_expr: typing_TypeAlias = ast.AsyncFor | ast.comprehension | ast.For
hasDOTtarget_Name: typing_TypeAlias = ast.NamedExpr
hasDOTtarget: typing_TypeAlias = hasDOTtarget_NameOrAttributeOrSubscript | hasDOTtarget_expr | hasDOTtarget_Name
hasDOTtargets: typing_TypeAlias = ast.Assign | ast.Delete
hasDOTtest: typing_TypeAlias = ast.Assert | ast.If | ast.IfExp | ast.While
hasDOTtype: typing_TypeAlias = ast.ExceptHandler
hasDOTtype_comment: typing_TypeAlias = ast.arg | ast.Assign | ast.AsyncFor | ast.AsyncFunctionDef | ast.AsyncWith | ast.For | ast.FunctionDef | ast.With
hasDOTtype_ignores: typing_TypeAlias = ast.Module
hasDOTtype_params: typing_TypeAlias = ast.AsyncFunctionDef | ast.ClassDef | ast.FunctionDef | astDOTTypeAlias
hasDOTupper: typing_TypeAlias = ast.Slice
hasDOTvalue_exprOrNone: typing_TypeAlias = ast.AnnAssign | ast.Return | ast.Yield
hasDOTvalue_expr: typing_TypeAlias = ast.Assign | ast.Attribute | ast.AugAssign | ast.Await | ast.DictComp | ast.Expr | ast.FormattedValue | ast.keyword | ast.MatchValue | ast.NamedExpr | ast.Starred | ast.Subscript | astDOTTypeAlias | ast.YieldFrom
hasDOTvalue_Any: typing_TypeAlias = ast.Constant
hasDOTvalue_LiteralTrueFalseOrNone: typing_TypeAlias = ast.MatchSingleton
hasDOTvalue: typing_TypeAlias = hasDOTvalue_exprOrNone | hasDOTvalue_expr | hasDOTvalue_Any | hasDOTvalue_LiteralTrueFalseOrNone
hasDOTvalues: typing_TypeAlias = ast.BoolOp | ast.Dict | ast.JoinedStr
hasDOTvararg: typing_TypeAlias = ast.arguments
