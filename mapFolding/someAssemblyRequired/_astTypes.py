from mapFolding import astDOTParamSpec, astDOTTryStar, astDOTTypeAlias, astDOTTypeVar, astDOTTypeVarTuple, ast.type_param
from typing import TypeAlias as typing_TypeAlias
import ast


hasDOTannotation_expr: typing_TypeAlias = ast.AnnAssign
hasDOTannotation_exprORNone: typing_TypeAlias = ast.arg
hasDOTannotation: typing_TypeAlias = hasDOTannotation_expr | hasDOTannotation_exprORNone
hasDOTarg_str: typing_TypeAlias = ast.arg
hasDOTarg_strORNone: typing_TypeAlias = ast.keyword
hasDOTarg: typing_TypeAlias = hasDOTarg_str | hasDOTarg_strORNone
hasDOTargs_arguments: typing_TypeAlias = ast.AsyncFunctionDef | ast.FunctionDef | ast.Lambda
hasDOTargs_list_arg: typing_TypeAlias = ast.arguments
hasDOTargs_list_expr: typing_TypeAlias = ast.Call
hasDOTargs: typing_TypeAlias = hasDOTargs_arguments | hasDOTargs_list_arg | hasDOTargs_list_expr
hasDOTargtypes: typing_TypeAlias = ast.FunctionType
hasDOTasname: typing_TypeAlias = ast.alias
hasDOTattr: typing_TypeAlias = ast.Attribute
hasDOTbases: typing_TypeAlias = ast.ClassDef
hasDOTbody_expr: typing_TypeAlias = ast.Expression | ast.IfExp | ast.Lambda
hasDOTbody_list_stmt: typing_TypeAlias = ast.AsyncFor | ast.AsyncFunctionDef | ast.AsyncWith | ast.ClassDef | ast.ExceptHandler | ast.For | ast.FunctionDef | ast.If | ast.Interactive | ast.Module | ast.Try | astDOTTryStar | ast.While | ast.With | ast.match_case
hasDOTbody: typing_TypeAlias = hasDOTbody_expr | hasDOTbody_list_stmt
hasDOTbound: typing_TypeAlias = astDOTTypeVar
hasDOTcases: typing_TypeAlias = ast.Match
hasDOTcause: typing_TypeAlias = ast.Raise
hasDOTcls: typing_TypeAlias = ast.MatchClass
hasDOTcomparators: typing_TypeAlias = ast.Compare
hasDOTcontext_expr: typing_TypeAlias = ast.withitem
hasDOTconversion: typing_TypeAlias = ast.FormattedValue
hasDOTctx: typing_TypeAlias = ast.Attribute | ast.List | ast.Name | ast.Starred | ast.Subscript | ast.Tuple
hasDOTdecorator_list: typing_TypeAlias = ast.AsyncFunctionDef | ast.ClassDef | ast.FunctionDef
hasDOTdefault_value: typing_TypeAlias = astDOTParamSpec | astDOTTypeVar | astDOTTypeVarTuple
hasDOTdefaults: typing_TypeAlias = ast.arguments
hasDOTelt: typing_TypeAlias = ast.GeneratorExp | ast.ListComp | ast.SetComp
hasDOTelts: typing_TypeAlias = ast.List | ast.Set | ast.Tuple
hasDOTexc: typing_TypeAlias = ast.Raise
hasDOTfinalbody: typing_TypeAlias = ast.Try | astDOTTryStar
hasDOTformat_spec: typing_TypeAlias = ast.FormattedValue
hasDOTfunc: typing_TypeAlias = ast.Call
hasDOTgenerators: typing_TypeAlias = ast.DictComp | ast.GeneratorExp | ast.ListComp | ast.SetComp
hasDOTguard: typing_TypeAlias = ast.match_case
hasDOThandlers: typing_TypeAlias = ast.Try | astDOTTryStar
hasDOTid: typing_TypeAlias = ast.Name
hasDOTifs: typing_TypeAlias = ast.comprehension
hasDOTis_async: typing_TypeAlias = ast.comprehension
hasDOTitems: typing_TypeAlias = ast.AsyncWith | ast.With
hasDOTiter: typing_TypeAlias = ast.AsyncFor | ast.For | ast.comprehension
hasDOTkey: typing_TypeAlias = ast.DictComp
hasDOTkeys: typing_TypeAlias = ast.Dict | ast.MatchMapping
hasDOTkeywords: typing_TypeAlias = ast.Call | ast.ClassDef
hasDOTkind: typing_TypeAlias = ast.Constant
hasDOTkw_defaults: typing_TypeAlias = ast.arguments
hasDOTkwarg: typing_TypeAlias = ast.arguments
hasDOTkwd_attrs: typing_TypeAlias = ast.MatchClass
hasDOTkwd_patterns: typing_TypeAlias = ast.MatchClass
hasDOTkwonlyargs: typing_TypeAlias = ast.arguments
hasDOTleft: typing_TypeAlias = ast.BinOp | ast.Compare
hasDOTlevel: typing_TypeAlias = ast.ImportFrom
hasDOTlineno: typing_TypeAlias = ast.TypeIgnore
hasDOTlower: typing_TypeAlias = ast.Slice
hasDOTmodule: typing_TypeAlias = ast.ImportFrom
hasDOTmsg: typing_TypeAlias = ast.Assert
hasDOTname_expr: typing_TypeAlias = astDOTTypeAlias
hasDOTname_str: typing_TypeAlias = ast.AsyncFunctionDef | ast.ClassDef | ast.FunctionDef | astDOTParamSpec | astDOTTypeVar | astDOTTypeVarTuple | ast.alias
hasDOTname_strORNone: typing_TypeAlias = ast.ExceptHandler | ast.MatchAs | ast.MatchStar
hasDOTname: typing_TypeAlias = hasDOTname_expr | hasDOTname_str | hasDOTname_strORNone
hasDOTnames_list_alias: typing_TypeAlias = ast.Import | ast.ImportFrom
hasDOTnames_list_str: typing_TypeAlias = ast.Global | ast.Nonlocal
hasDOTnames: typing_TypeAlias = hasDOTnames_list_alias | hasDOTnames_list_str
hasDOTop_boolop: typing_TypeAlias = ast.BoolOp
hasDOTop_operator: typing_TypeAlias = ast.AugAssign | ast.BinOp
hasDOTop_unaryop: typing_TypeAlias = ast.UnaryOp
hasDOTop: typing_TypeAlias = hasDOTop_boolop | hasDOTop_operator | hasDOTop_unaryop
hasDOToperand: typing_TypeAlias = ast.UnaryOp
hasDOTops: typing_TypeAlias = ast.Compare
hasDOToptional_vars: typing_TypeAlias = ast.withitem
hasDOTorelse_expr: typing_TypeAlias = ast.IfExp
hasDOTorelse_list_stmt: typing_TypeAlias = ast.AsyncFor | ast.For | ast.If | ast.Try | astDOTTryStar | ast.While
hasDOTorelse: typing_TypeAlias = hasDOTorelse_expr | hasDOTorelse_list_stmt
hasDOTpattern_pattern: typing_TypeAlias = ast.match_case
hasDOTpattern_patternORNone: typing_TypeAlias = ast.MatchAs
hasDOTpattern: typing_TypeAlias = hasDOTpattern_pattern | hasDOTpattern_patternORNone
hasDOTpatterns: typing_TypeAlias = ast.MatchClass | ast.MatchMapping | ast.MatchOr | ast.MatchSequence
hasDOTposonlyargs: typing_TypeAlias = ast.arguments
hasDOTrest: typing_TypeAlias = ast.MatchMapping
hasDOTreturns_expr: typing_TypeAlias = ast.FunctionType
hasDOTreturns_exprORNone: typing_TypeAlias = ast.AsyncFunctionDef | ast.FunctionDef
hasDOTreturns: typing_TypeAlias = hasDOTreturns_expr | hasDOTreturns_exprORNone
hasDOTright: typing_TypeAlias = ast.BinOp
hasDOTsimple: typing_TypeAlias = ast.AnnAssign
hasDOTslice: typing_TypeAlias = ast.Subscript
hasDOTstep: typing_TypeAlias = ast.Slice
hasDOTsubject: typing_TypeAlias = ast.Match
hasDOTtag: typing_TypeAlias = ast.TypeIgnore
hasDOTtarget: typing_TypeAlias = ast.AnnAssign | ast.AsyncFor | ast.AugAssign | ast.For | ast.NamedExpr | ast.comprehension
hasDOTtargets: typing_TypeAlias = ast.Assign | ast.Delete
hasDOTtest: typing_TypeAlias = ast.Assert | ast.If | ast.IfExp | ast.While
hasDOTtype: typing_TypeAlias = ast.ExceptHandler
hasDOTtype_comment: typing_TypeAlias = ast.Assign | ast.AsyncFor | ast.AsyncFunctionDef | ast.AsyncWith | ast.For | ast.FunctionDef | ast.With | ast.arg
hasDOTtype_ignores: typing_TypeAlias = ast.Module
hasDOTtype_params: typing_TypeAlias = ast.AsyncFunctionDef | ast.ClassDef | ast.FunctionDef | astDOTTypeAlias
hasDOTupper: typing_TypeAlias = ast.Slice
hasDOTvalue_Any: typing_TypeAlias = ast.Constant
hasDOTvalue_boolORNone: typing_TypeAlias = ast.MatchSingleton
hasDOTvalue_expr: typing_TypeAlias = ast.Assign | ast.Attribute | ast.AugAssign | ast.Await | ast.DictComp | ast.Expr | ast.FormattedValue | ast.MatchValue | ast.NamedExpr | ast.Starred | ast.Subscript | astDOTTypeAlias | ast.YieldFrom | ast.keyword
hasDOTvalue_exprORNone: typing_TypeAlias = ast.AnnAssign | ast.Return | ast.Yield
hasDOTvalue: typing_TypeAlias = hasDOTvalue_Any | hasDOTvalue_boolORNone | hasDOTvalue_expr | hasDOTvalue_exprORNone
hasDOTvalues: typing_TypeAlias = ast.BoolOp | ast.Dict | ast.JoinedStr
hasDOTvararg: typing_TypeAlias = ast.arguments
