from mapFolding import ComputationState as ComputationState

def activeLeafConnectedToItself(state: ComputationState) -> bool: ...
def activeLeafGreaterThan0(state: ComputationState) -> bool: ...
def activeLeafGreaterThanLeavesTotal(state: ComputationState) -> bool: ...
def activeLeafIsTheFirstLeaf(state: ComputationState) -> bool: ...
def allDimensionsAreUnconstrained(state: ComputationState) -> bool: ...
def backtrack(state: ComputationState) -> ComputationState: ...
def countGaps(state: ComputationState) -> ComputationState: ...
def decrementDimensionsUnconstrained(state: ComputationState) -> ComputationState: ...
def dimensionsUnconstrainedCondition(state: ComputationState) -> bool: ...
def filterCommonGaps(state: ComputationState) -> ComputationState: ...
def incrementActiveGap(state: ComputationState) -> ComputationState: ...
def incrementGap1ndexCeiling(state: ComputationState) -> ComputationState: ...
def incrementIndexDimension(state: ComputationState) -> ComputationState: ...
def incrementIndexMiniGap(state: ComputationState) -> ComputationState: ...
def initializeIndexMiniGap(state: ComputationState) -> ComputationState: ...
def initializeLeafConnectee(state: ComputationState) -> ComputationState: ...
def initializeVariablesToFindGaps(state: ComputationState) -> ComputationState: ...
def insertUnconstrainedLeaf(state: ComputationState) -> ComputationState: ...
def leafBelowSentinelIs1(state: ComputationState) -> bool: ...
def loopingLeavesConnectedToActiveLeaf(state: ComputationState) -> bool: ...
def loopingToActiveGapCeiling(state: ComputationState) -> bool: ...
def loopUpToDimensionsTotal(state: ComputationState) -> bool: ...
def noGapsHere(state: ComputationState) -> bool: ...
def placeLeaf(state: ComputationState) -> ComputationState: ...
def thereIsAnActiveLeaf(state: ComputationState) -> bool: ...
def thisIsMyTaskIndex(state: ComputationState) -> bool: ...
def updateLeafConnectee(state: ComputationState) -> ComputationState: ...
def countInitialize(state: ComputationState) -> ComputationState: ...
def countParallel(statePARALLEL: ComputationState) -> ComputationState: ...
def countSequential(state: ComputationState) -> ComputationState: ...
def doTheNeedful(computationStateInitialized: ComputationState) -> ComputationState: ...
