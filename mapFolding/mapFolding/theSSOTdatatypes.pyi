from mapFolding.theConfiguration import *
import enum
from typing import Any, Final

class EnumIndices(enum.IntEnum):
    @staticmethod
    def _generate_next_value_(name: str, start: int, count: int, last_values: list[Any]) -> int: ...
    def __index__(self) -> int: ...

class indexMy(EnumIndices):
    dimensionsTotal = ...
    dimensionsUnconstrained = ...
    gap1ndex = ...
    gap1ndexCeiling = ...
    indexDimension = ...
    indexLeaf = ...
    indexMiniGap = ...
    leaf1ndex = ...
    leafConnectee = ...
    taskDivisions = ...
    taskIndex = ...

class indexTrack(EnumIndices):
    leafAbove = ...
    leafBelow = ...
    countDimensionsGapped = ...
    gapRangeStart = ...

_datatypeDefault: Final[dict[str, str]]
_datatypeModule: str
_registryOfDatatypes: dict[str, str]

def reportDatatypeLimit(identifier: str, datatype: str, sourGrapes: bool | None = False) -> str: ...
def setDatatypeModule(datatypeModule: str, sourGrapes: bool | None = False) -> str: ...
def setDatatypeElephino(datatype: str, sourGrapes: bool | None = False) -> str: ...
def setDatatypeFoldsTotal(datatype: str, sourGrapes: bool | None = False) -> str: ...
def setDatatypeLeavesTotal(datatype: str, sourGrapes: bool | None = False) -> str: ...
def _get_datatype(identifier: str) -> str: ...
def getDatatypeModule() -> str: ...
def setInStone(identifier: str) -> type[Any]: ...
def hackSSOTdtype(identifier: str) -> type[Any]: ...
def hackSSOTdatatype(identifier: str) -> str: ...
