import ast
import types
from mapFolding.someAssemblyRequired import FunctionInliner as FunctionInliner, LedgerOfImports as LedgerOfImports, YouOughtaKnow as YouOughtaKnow, ast_Identifier as ast_Identifier, decorateCallableWithNumba as decorateCallableWithNumba
from mapFolding.theSSOT import FREAKOUT as FREAKOUT, ParametersNumba as ParametersNumba, ParametersSynthesizeNumbaCallable as ParametersSynthesizeNumbaCallable, filenameModuleSyntheticWrite as filenameModuleSyntheticWrite, filenameWriteCallableTargetDEFAULT as filenameWriteCallableTargetDEFAULT, formatStrFilenameForCallableSynthetic as formatStrFilenameForCallableSynthetic, autoflake_additional_imports as autoflake_additional_imports, getAlgorithmDispatcher as getAlgorithmDispatcher, getSourceAlgorithm as getSourceAlgorithm, getDatatypeModule as getDatatypeModule, listNumbaCallableDispatchees as listNumbaCallableDispatchees, thePathPackage as thePathPackage, theModuleOfSyntheticModules as theModuleOfSyntheticModules
from os import PathLike
from typing import Any, overload

def makeFunctionDef(astModule: ast.Module, callableTarget: str, parametersNumba: ParametersNumba | None = None, inlineCallables: bool | None = False, allImports: LedgerOfImports | None = None) -> tuple[ast.FunctionDef, LedgerOfImports]: ...
def getFunctionDef(algorithmSource: types.ModuleType, *arguments: Any, **keywordArguments: Any) -> tuple[ast.FunctionDef, LedgerOfImports]: ...
def makePythonSource(listFunctionDefs: list[ast.FunctionDef], listAstImports: list[ast.Import | ast.ImportFrom], additional_imports: list[str]) -> str: ...
def writePythonAsModule(pythonSource: str, listCallableSynthesized: list[ParametersSynthesizeNumbaCallable], relativePathWrite: str | PathLike[str], filenameWrite: str | None, formatFilenameWrite: str) -> list[YouOughtaKnow]: ...
@overload
def makeFlowNumbaOptimized() -> list[YouOughtaKnow]: ...
@overload
def makeFlowNumbaOptimized(listCallablesInline: list[ParametersSynthesizeNumbaCallable], callableDispatcher: bool, algorithmSource: types.ModuleType, relativePathWrite: str | PathLike[str], filenameModuleWrite: str, formatFilenameWrite: str) -> list[YouOughtaKnow]: ...
