import ast
import types
from mapFolding import FREAKOUT as FREAKOUT, ParametersNumba as ParametersNumba, Z0Z_filenameModuleWrite as Z0Z_filenameModuleWrite, Z0Z_filenameWriteElseCallableTarget as Z0Z_filenameWriteElseCallableTarget, Z0Z_formatFilenameModuleSynthetic as Z0Z_formatFilenameModuleSynthetic, additional_importsHARDCODED as additional_importsHARDCODED, getAlgorithmDispatcher as getAlgorithmDispatcher, getAlgorithmSource as getAlgorithmSource, getDatatypeModule as getDatatypeModule, listCallablesDispatchees as listCallablesDispatchees, moduleOfSyntheticModulesPACKAGING as moduleOfSyntheticModulesPACKAGING, parametersNumbaDEFAULT as parametersNumbaDEFAULT, parametersNumbaSuperJit as parametersNumbaSuperJit, parametersNumbaSuperJitParallel as parametersNumbaSuperJitParallel, pathPackage as pathPackage
from mapFolding.someAssemblyRequired import FunctionInliner as FunctionInliner, UniversalImportTracker as UniversalImportTracker, UnpackArrays as UnpackArrays, YouOughtaKnow as YouOughtaKnow, ast_Identifier as ast_Identifier, decorateCallableWithNumba as decorateCallableWithNumba
from os import PathLike
from typing import Any, overload

def makeFunctionDef(astModule: ast.Module, callableTarget: str, parametersNumba: ParametersNumba | None = None, inlineCallables: bool | None = False, unpackArrays: bool | None = False, allImports: UniversalImportTracker | None = None) -> tuple[ast.FunctionDef, UniversalImportTracker]: ...
def getFunctionDef(algorithmSource: types.ModuleType, *arguments: Any, **keywordArguments: Any) -> tuple[ast.FunctionDef, UniversalImportTracker]: ...
def makePythonSource(listFunctionDefs: list[ast.FunctionDef], listAstImports: list[ast.Import | ast.ImportFrom], additional_imports: list[str]) -> str: ...
def writePythonAsModule(pythonSource: str, listCallableSynthesized: list[str], relativePathWrite: str | PathLike[str], filenameWrite: str | None, formatFilenameWrite: str) -> list[YouOughtaKnow]: ...
@overload
def makeFlowNumbaOptimized() -> list[YouOughtaKnow]: ...
@overload
def makeFlowNumbaOptimized(listCallablesInline: list[str], callableDispatcher: bool, algorithmSource: types.ModuleType, relativePathWrite: str | PathLike[str], filenameModuleWrite: str, formatFilenameWrite: str) -> list[YouOughtaKnow]: ...
