name: Python Tests

on: [push, pull_request]

permissions:
  contents: read

jobs:

  getVersionsPython:
    runs-on: ubuntu-latest
    outputs:
      versionsPython: ${{ steps.pythonCLI.outputs.versionsPython }}

    steps:
      - uses: actions/checkout@v4
      - name: pip install dependencies
        run: python -m pip install packaging requests tomli
      - name: Process Python versions
        id: pythonCLI
        run: |
          set -e
          VERSIONS=$(python -c "
          from packaging.specifiers import SpecifierSet
          from packaging.version import Version
          from pathlib import Path
          import itertools, json, requests, tomli

          specifications = SpecifierSet(tomli.loads(Path('pyproject.toml').read_text())['project']['requires-python'])

          listVersionsPython = [str(max(group)) for _key, group in itertools.groupby(
            specifications.filter(Version(item['version']) for item in requests.get(
              'https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json').json())
            , lambda V: V.release[0:-1])]

          print(json.dumps(listVersionsPython))
          ")
          echo "versions=$(echo $VERSIONS | jq -c .)" >> "$GITHUB_OUTPUT"

  executeTests:
    needs: getVersionsPython
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pythonVersion: ${{fromJson(needs.getVersionsPython.outputs.versionsPython)}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pythonVersion }}

      - name: pip install ".[testing]"
        run: |
          python -m pip install --upgrade pip
          pip install ".[testing]"

      - run: pytest
