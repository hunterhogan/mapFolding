name: Python Tests
on: [push, pull_request]
jobs:
  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.get-python-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v4
      - name: Install toml parser
        run: pip install tomli
      - id: get-python-versions
        run: |
          VERSIONS=$(python -c "
          import tomli, json
          import packaging.specifiers
          import packaging.version

          with open('pyproject.toml', 'rb') as readStreamBinaryMode:
            specifierPython = packaging.specifiers.SpecifierSet(tomli.load(readStreamBinaryMode)['project']['requires-python'])
  
          listCandidateVersionsInSpecifier = []
          for majorVersion in range(2, 12):
            for minorVersion in range(0, 40):
              versionCandidate = packaging.version.Version(f'{majorVersion}.{minorVersion}')
              if versionCandidate in specifierPython:
                listCandidateVersionsInSpecifier.append(f'{majorVersion}.{minorVersion}')
  
          print(json.dumps(listCandidateVersionsInSpecifier))
          ")
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT

  build:
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.get-python-versions.outputs.versions) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[testing]"
          
      - name: Run tests with coverage
        run: pytest
