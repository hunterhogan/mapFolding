# See https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Make PyPI Release

on:
  workflow_run:
    workflows: ["Python Tests"]
    types: [completed]
  workflow_dispatch:
  release:
    types: [published, released]

permissions:
  contents: read

jobs:
  verifyVersion:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      statusPublish: ${{ steps.verifyPyPI.outputs.statusPublish }}
      versionPackage: ${{ steps.extractVersion.outputs.versionPackage }}
      namePackage: ${{ steps.verifyPyPI.outputs.namePackage }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Extract package version
        id: extractVersion
        run: |
          python -m pip install toml
          echo "versionPackage=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")" >> "%GITHUB_OUTPUT%"

      - name: Verify PyPI version
        id: verifyPyPI
        run: |
          python -m pip install requests toml
          SET versionPackage=${{ steps.extractVersion.outputs.versionPackage }}
          FOR /F "tokens=*" %%i IN ('python -c "import toml; print(toml.load('pyproject.toml')['project']['name'])"') DO SET namePackage=%%i
          echo "namePackage=%namePackage%" >> "%GITHUB_OUTPUT%"

          python -c "import requests, sys; print('statusPublish=false' if sys.argv[1] in requests.get(f'https://pypi.org/pypi/{sys.argv[2]}/json').json()['releases'] else 'statusPublish=true')" "%versionPackage%" "%namePackage%" >> "%GITHUB_OUTPUT%"

  buildRelease:
    needs: verifyVersion
    if: needs.verifyVersion.outputs.statusPublish == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Build package distributions
        run: |
          python -m pip install build
          python -m build
      - uses: actions/upload-artifact@v4
        with:
          name: distributionsRelease
          path: dist/

  publishPyPI:
    needs: [verifyVersion, buildRelease]
    if: needs.verifyVersion.outputs.statusPublish == 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/${{ needs.verifyVersion.outputs.namePackage }}/${{ needs.verifyVersion.outputs.versionPackage }}
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: distributionsRelease
          path: dist/
      - uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.2
        with:
          packages-dir: dist/
